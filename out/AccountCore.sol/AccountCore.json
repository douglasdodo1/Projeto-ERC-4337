{"abi":[{"type":"receive","stateMutability":"payable"},{"type":"function","name":"entryPoint","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IEntryPoint"}],"stateMutability":"view"},{"type":"function","name":"getNonce","inputs":[{"name":"key","type":"uint192","internalType":"uint192"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getNonce","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"validateUserOp","inputs":[{"name":"userOp","type":"tuple","internalType":"struct PackedUserOperation","components":[{"name":"sender","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"initCode","type":"bytes","internalType":"bytes"},{"name":"callData","type":"bytes","internalType":"bytes"},{"name":"accountGasLimits","type":"bytes32","internalType":"bytes32"},{"name":"preVerificationGas","type":"uint256","internalType":"uint256"},{"name":"gasFees","type":"bytes32","internalType":"bytes32"},{"name":"paymasterAndData","type":"bytes","internalType":"bytes"},{"name":"signature","type":"bytes","internalType":"bytes"}]},{"name":"userOpHash","type":"bytes32","internalType":"bytes32"},{"name":"missingAccountFunds","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"error","name":"AccountUnauthorized","inputs":[{"name":"sender","type":"address","internalType":"address"}]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"entryPoint()":"b0d691fe","getNonce()":"d087d288","getNonce(uint192)":"3e1b0812","validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)":"19822f7c"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AccountUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"accountGasLimits\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasFees\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PackedUserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"A simple ERC4337 account implementation. This base implementation only includes the minimal logic to process user operations. Developers must implement the {AccountCore-_signableUserOpHash} and {AbstractSigner-_rawSignatureValidation} functions to define the account's validation logic. NOTE: This core account doesn't include any mechanism for performing arbitrary external calls. This is an essential feature that all Account should have. We leave it up to the developers to implement the mechanism of their choice. Common choices include ERC-6900, ERC-7579 and ERC-7821 (among others). IMPORTANT: Implementing a mechanism to validate signatures is a security-sensitive operation as it may allow an attacker to bypass the account's security measures. Check out {SignerECDSA}, {SignerP256}, or {SignerRSA} for digital signature validation implementations.\",\"errors\":{\"AccountUnauthorized(address)\":[{\"details\":\"Unauthorized call to the account.\"}]},\"kind\":\"dev\",\"methods\":{\"entryPoint()\":{\"details\":\"Canonical entry point for the account that forwards and validates user operations.\"},\"getNonce()\":{\"details\":\"Return the account nonce for the canonical sequence.\"},\"getNonce(uint192)\":{\"details\":\"Return the account nonce for a given sequence (key).\"},\"validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)\":{\"details\":\"Validates a user operation. * MUST validate the caller is a trusted EntryPoint * MUST validate that the signature is a valid signature of the userOpHash, and SHOULD   return SIG_VALIDATION_FAILED (and not revert) on signature mismatch. Any other error MUST revert. * MUST pay the entryPoint (caller) at least the \\u201cmissingAccountFunds\\u201d (which might   be zero, in case the current account\\u2019s deposit is high enough) Returns an encoded packed validation data that is composed of the following elements: - `authorizer` (`address`): 0 for success, 1 for failure, otherwise the address of an authorizer contract - `validUntil` (`uint48`): The UserOp is valid only up to this time. Zero for \\u201cinfinite\\u201d. - `validAfter` (`uint48`): The UserOp is valid only after this time.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/AccountCore.sol\":\"AccountCore\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/AccountCore.sol\":{\"keccak256\":\"0xb1a522570e3ce47254c6734726336e884ee732057adde9264cabe070e1d82041\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://048690b92a0f85fad11a8a30f96c7a64fc983e43535cb675908bcc6ac258b123\",\"dweb:/ipfs/QmTCFgMPVqRQHmUQ3iBCyHkC6pseEHUqABZywBwsYf8PBi\"]},\"utils/openzeppelin-community-contracts/contracts/utils/cryptography/AbstractSigner.sol\":{\"keccak256\":\"0xe12f0b1c9f1a243c6cadca1aa4e2c8cde7f8b7e032f4f3dcdfd58812cdf86f48\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0b9ae8a8f0e31e131a8ee24b8e67e7631f160c3cb35d50e4c14f5ba341501e14\",\"dweb:/ipfs/QmPS21cuu9y6iVskLK51rFPDPbT1XFWppU29TuJv3GSqF3\"]},\"utils/openzeppelin-contracts/contracts/account/utils/draft-ERC4337Utils.sol\":{\"keccak256\":\"0x50f43511320b7c19873273939d596e0c25813f90f081342a7797f32090fa2aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5580602684dc1d431001b28d3d81edb4cf9cf5b9787b7612e69a19e7cb88412e\",\"dweb:/ipfs/QmQwWq5KmUX7XhdZ2B4ZooRk6dnDU7QqP9ZDL29uSLD64S\"]},\"utils/openzeppelin-contracts/contracts/interfaces/draft-IERC4337.sol\":{\"keccak256\":\"0xe9d0f9f3c6626d14e849d1295b9222d58b5d4a48c7d3f0d0c82dcf0c6542b9bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6aaf000ef7df0f059e1eaa34b3db6d5bed1ab0ed59782b0e9bb086b5b8ef83cc\",\"dweb:/ipfs/QmekM1G5ENxGm23VeszyEjnbzf8g3czj2k8Mtig9RmnTnr\"]},\"utils/openzeppelin-contracts/contracts/utils/Calldata.sol\":{\"keccak256\":\"0x74eabf18439649dfaba15675bcd2cfadb7c03b85f7ea8345da396dc666ede428\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bcfd52b6b4113a8198db83b93faf11c3d26915fd90ccf2ad4318107f3de29a48\",\"dweb:/ipfs/QmYu1LM5F7Vq5yBEVVGS6ZU7vucV7z5KzYgRGTPes45x6S\"]},\"utils/openzeppelin-contracts/contracts/utils/Packing.sol\":{\"keccak256\":\"0xea9f5d3cdd11b7af7d8662a5c0e952f3666145cb4c9fe1452bd15c30abc462dd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8fcae95be7077d103530c4e6a5f1248aa64102dad62d642e2530316ab002e02c\",\"dweb:/ipfs/QmWCr2qicfaqsTbpgq7CJhedUHcPQv34k8HNs4f5kGjVnw\"]},\"utils/openzeppelin-contracts/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"utils/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xf98bc4b1d01130679a1547b0f6b5b9f9a9190fe362d332fda43a5578c8af5bc4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://78f3bf08130ae5bcd1006d435914c1b07dc8abc290e6a5b86e5794a6ec9ae917\",\"dweb:/ipfs/QmReTCvi9s9DK97zFn7yJBrbKPoRm7e2txvoFE9kP3j3ws\"]},\"utils/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"type":"error","name":"AccountUnauthorized"},{"inputs":[],"stateMutability":"view","type":"function","name":"entryPoint","outputs":[{"internalType":"contract IEntryPoint","name":"","type":"address"}]},{"inputs":[{"internalType":"uint192","name":"key","type":"uint192"}],"stateMutability":"view","type":"function","name":"getNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"struct PackedUserOperation","name":"userOp","type":"tuple","components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"bytes32","name":"accountGasLimits","type":"bytes32"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"bytes32","name":"gasFees","type":"bytes32"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}]},{"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"internalType":"uint256","name":"missingAccountFunds","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"validateUserOp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"entryPoint()":{"details":"Canonical entry point for the account that forwards and validates user operations."},"getNonce()":{"details":"Return the account nonce for the canonical sequence."},"getNonce(uint192)":{"details":"Return the account nonce for a given sequence (key)."},"validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)":{"details":"Validates a user operation. * MUST validate the caller is a trusted EntryPoint * MUST validate that the signature is a valid signature of the userOpHash, and SHOULD   return SIG_VALIDATION_FAILED (and not revert) on signature mismatch. Any other error MUST revert. * MUST pay the entryPoint (caller) at least the “missingAccountFunds” (which might   be zero, in case the current account’s deposit is high enough) Returns an encoded packed validation data that is composed of the following elements: - `authorizer` (`address`): 0 for success, 1 for failure, otherwise the address of an authorizer contract - `validUntil` (`uint48`): The UserOp is valid only up to this time. Zero for “infinite”. - `validAfter` (`uint48`): The UserOp is valid only after this time."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/AccountCore.sol":"AccountCore"},"evmVersion":"cancun","libraries":{}},"sources":{"src/AccountCore.sol":{"keccak256":"0xb1a522570e3ce47254c6734726336e884ee732057adde9264cabe070e1d82041","urls":["bzz-raw://048690b92a0f85fad11a8a30f96c7a64fc983e43535cb675908bcc6ac258b123","dweb:/ipfs/QmTCFgMPVqRQHmUQ3iBCyHkC6pseEHUqABZywBwsYf8PBi"],"license":"MIT"},"utils/openzeppelin-community-contracts/contracts/utils/cryptography/AbstractSigner.sol":{"keccak256":"0xe12f0b1c9f1a243c6cadca1aa4e2c8cde7f8b7e032f4f3dcdfd58812cdf86f48","urls":["bzz-raw://0b9ae8a8f0e31e131a8ee24b8e67e7631f160c3cb35d50e4c14f5ba341501e14","dweb:/ipfs/QmPS21cuu9y6iVskLK51rFPDPbT1XFWppU29TuJv3GSqF3"],"license":"MIT"},"utils/openzeppelin-contracts/contracts/account/utils/draft-ERC4337Utils.sol":{"keccak256":"0x50f43511320b7c19873273939d596e0c25813f90f081342a7797f32090fa2aff","urls":["bzz-raw://5580602684dc1d431001b28d3d81edb4cf9cf5b9787b7612e69a19e7cb88412e","dweb:/ipfs/QmQwWq5KmUX7XhdZ2B4ZooRk6dnDU7QqP9ZDL29uSLD64S"],"license":"MIT"},"utils/openzeppelin-contracts/contracts/interfaces/draft-IERC4337.sol":{"keccak256":"0xe9d0f9f3c6626d14e849d1295b9222d58b5d4a48c7d3f0d0c82dcf0c6542b9bf","urls":["bzz-raw://6aaf000ef7df0f059e1eaa34b3db6d5bed1ab0ed59782b0e9bb086b5b8ef83cc","dweb:/ipfs/QmekM1G5ENxGm23VeszyEjnbzf8g3czj2k8Mtig9RmnTnr"],"license":"MIT"},"utils/openzeppelin-contracts/contracts/utils/Calldata.sol":{"keccak256":"0x74eabf18439649dfaba15675bcd2cfadb7c03b85f7ea8345da396dc666ede428","urls":["bzz-raw://bcfd52b6b4113a8198db83b93faf11c3d26915fd90ccf2ad4318107f3de29a48","dweb:/ipfs/QmYu1LM5F7Vq5yBEVVGS6ZU7vucV7z5KzYgRGTPes45x6S"],"license":"MIT"},"utils/openzeppelin-contracts/contracts/utils/Packing.sol":{"keccak256":"0xea9f5d3cdd11b7af7d8662a5c0e952f3666145cb4c9fe1452bd15c30abc462dd","urls":["bzz-raw://8fcae95be7077d103530c4e6a5f1248aa64102dad62d642e2530316ab002e02c","dweb:/ipfs/QmWCr2qicfaqsTbpgq7CJhedUHcPQv34k8HNs4f5kGjVnw"],"license":"MIT"},"utils/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a","urls":["bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a","dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"],"license":"MIT"},"utils/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xf98bc4b1d01130679a1547b0f6b5b9f9a9190fe362d332fda43a5578c8af5bc4","urls":["bzz-raw://78f3bf08130ae5bcd1006d435914c1b07dc8abc290e6a5b86e5794a6ec9ae917","dweb:/ipfs/QmReTCvi9s9DK97zFn7yJBrbKPoRm7e2txvoFE9kP3j3ws"],"license":"MIT"},"utils/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54","urls":["bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8","dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"],"license":"MIT"}},"version":1},"id":23}